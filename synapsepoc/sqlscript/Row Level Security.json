{
	"name": "Row Level Security",
	"properties": {
		"content": {
			"query": "--Create three user accounts that will demonstrate different access  \n\nCREATE USER Ann WITH PASSWORD = '<strong_password>';\n\n-- capabilities \nCREATE LOGIN Sales3 WITH PASSWORD = 'teste@123';\n\nCREATE USER Manager WITHOUT LOGIN; \n\nCREATE USER Sales1 WITHOUT LOGIN; \n\nCREATE USER Sales3 FROM LOGIN Sales3; \n\n \n\n--Create a table to hold data \n\nCREATE TABLE Sales \n\n ( \n\n OrderID int, \n\n SalesRep sysname, \n\n Product varchar(10), \n\n Qty int \n\n ); \n\n \n\n--Insert data into table with six rows of data,  \n\n--showing three orders for each sales representative \n\nINSERT INTO Sales VALUES (1, 'Sales1', 'Valve', 5); \n\nINSERT INTO Sales VALUES (2, 'Sales1', 'Wheel', 2); \n\nINSERT INTO Sales VALUES (3, 'Sales1', 'Valve', 4); \n\nINSERT INTO Sales VALUES (4, 'Sales2', 'Bracket', 2); \n\nINSERT INTO Sales VALUES (5, 'Sales2', 'Wheel', 5); \n\nINSERT INTO Sales VALUES (6, 'Sales2', 'Seat', 5); \n\n-- View the 6 rows in the table \n\nSELECT * FROM Sales; \n\n \n\n--Grant read access on the table to each of the users \n\nGRANT SELECT ON Sales TO Manager; \n\nGRANT SELECT ON Sales TO Sales1; \n\nGRANT SELECT ON Sales TO Sales3; \n\n \n\n--Create a new schema, and an inline table-valued function. \n\n--The function returns 1 when a row in the SalesRep column is the same  \n\n--as the user executing the query (@SalesRep = USER_NAME()) or  \n\n--if the user executing the query is the Manager user  \n\n--(USER_NAME() = 'Manager') \n\nEXEC('CREATE SCHEMA Security'); \n\nGO \n\n \n\n --Select the code for creating the function and run \n\nCREATE FUNCTION Security.fn_securitypredicate(@SalesRep AS sysname) \n\n RETURNS TABLE \n\nWITH SCHEMABINDING \n\nAS \n\n RETURN SELECT 1 AS fn_securitypredicate_result \n\nWHERE @SalesRep = USER_NAME() OR USER_NAME() = 'Sales3' \n\nGO \n\n--Create a security policy adding the function as a filter predicate.  \n\n--The state must be set to ON to enable the policy. \n\nCREATE SECURITY POLICY SalesFilter \n\nADD FILTER PREDICATE Security.fn_securitypredicate(SalesRep) \n\nON dbo.Sales \n\nWITH (STATE = ON); \n\n \n\n--Allow SELECT permissions to the fn_securitypredicate function \n\nGRANT SELECT ON security.fn_securitypredicate TO Manager; \n\nGRANT SELECT ON security.fn_securitypredicate TO Sales1; \n\nGRANT SELECT ON security.fn_securitypredicate TO Sales3; \n\n \n\n--Test the filtering predicate, by selected from the  \n\n-- Sales table as each user \n\nEXECUTE AS USER = 'Sales1'; \n\nSELECT * FROM Sales; \n\nREVERT; \n\n \n\nEXECUTE AS USER = 'Sales3'; \n\nSELECT * FROM Sales; \n\nREVERT; \n\n \n\nEXECUTE AS USER = 'Manager'; \n\nSELECT * FROM Sales; \n\nREVERT; \n\n \n\n--Alter the security policy to disable the policy \n\nALTER SECURITY POLICY SalesFilter \n\nWITH (STATE = OFF); \n\n \n\n--Connect to the SQL database to clean up resources \n\nDROP USER Sales1; \n\nDROP USER Sales2; \n\nDROP USER Manager; \n\n \n\nDROP SECURITY POLICY SalesFilter; \n\nDROP TABLE Sales; \n\nDROP FUNCTION Security.fn_securitypredicate; \n\nDROP SCHEMA Security; \n\n\nGRANT SELECT ON Membership TO Sales3\n\nEXECUTE AS USER = 'Sales3'; \n\nSELECT * FROM Membership; \n\nREVERT; ",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "llkqqcnd5pm6cvcapocws1p1",
				"poolName": "llkqqcnd5pm6cvcapocws1p1"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}